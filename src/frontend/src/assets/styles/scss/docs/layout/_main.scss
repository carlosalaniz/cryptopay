@use "sass:map";
@use "@picocss/pico/scss/settings" as *;

/**
 * Docs: Main
 */

body {
  #{$css-var-prefix}main-top-offset: 0rem;

  > header {
    &.is-fixed-above-lg {
      + main {
        #{$css-var-prefix}main-top-offset: var(#{$css-var-prefix}header-height);
      }
    }
  }

  > main {
    display: grid;
    grid-template-rows: 1fr;
    row-gap: 2rem;
    margin-bottom: calc(var(#{$css-var-prefix}spacing) * 4);
    padding: 0;

    > * {
      min-width: 0;
      margin-bottom: 0;
    }

    @media (min-width: map.get(map.get($breakpoints, "lg"), "breakpoint")) {
      $aside-width: 11rem;
      grid-template-rows: auto 1fr;
      grid-template-columns: $aside-width 1fr;
      grid-template-areas:
        "menu header"
        "menu body";
      column-gap: 3rem;
      row-gap: 3rem;

      // Hack for Firefox, which doesn't support the `:has()` pseudo-class
      &.has-table-of-contents {
        grid-template-rows: auto auto 1fr;
        grid-template-columns: $aside-width 1fr;
        grid-template-areas:
          "menu header"
          "menu table-of-content"
          "menu body";
      }

      &:has(aside#table-of-contents) {
        grid-template-rows: auto auto 1fr;
        grid-template-columns: $aside-width 1fr;
        grid-template-areas:
          "menu header"
          "menu table-of-content"
          "menu body";
      }

      > nav[aria-label="breadcrumb"] {
        display: none;
      }

      > aside {
        > nav {
          margin-top: calc(var(#{$css-var-prefix}block-spacing-vertical) / 2);
          &.is-sticky-above-lg {
            position: sticky;
            top: calc(
              var(#{$css-var-prefix}main-top-offset) +
                (var(#{$css-var-prefix}block-spacing-vertical) / 2)
            );
            max-height: calc(var(--max-height) - var(#{$css-var-prefix}spacing));
            overflow: auto;
            transition: top var(#{$css-var-prefix}transition);
            transition-delay: 0.05s;
          }
        }
      }

      > aside#documentation-menu {
        grid-area: menu;
      }

      > hgroup {
        grid-area: header;
        margin-top: calc(var(#{$css-var-prefix}block-spacing-vertical) / 2);
      }

      > aside#table-of-contents {
        grid-area: table-of-content;
      }

      > [role="document"] {
        grid-area: body;
      }
    }

    @media (min-width: map.get(map.get($breakpoints, "xl"), "breakpoint")) {
      $aside-width: 10.5rem;
      grid-template-rows: auto 1fr;
      grid-template-columns: $aside-width 1fr;
      grid-template-areas:
        "menu header"
        "menu body";
      row-gap: 4rem;

      // Hack for Firefox, which doesn't support the `:has()` pseudo-class
      &.has-table-of-contents {
        grid-template-rows: auto 1fr;
        grid-template-columns: $aside-width 1fr $aside-width;
        grid-template-areas:
          "menu header table-of-content"
          "menu body table-of-content";
      }

      &:has(aside#table-of-contents) {
        grid-template-rows: auto 1fr;
        grid-template-columns: $aside-width 1fr $aside-width;
        grid-template-areas:
          "menu header table-of-content"
          "menu body table-of-content";
      }

      > aside#documentation-menu {
        grid-area: menu;
      }

      > hgroup {
        grid-area: header;
      }

      > aside#table-of-contents {
        grid-area: table-of-content;
      }

      > [role="document"] {
        grid-area: body;
      }
    }

    @media (min-width: map.get(map.get($breakpoints, "xxl"), "breakpoint")) {
      $aside-width: 10rem;
      grid-template-rows: auto 1fr;
      grid-template-columns: $aside-width 1fr $aside-width;
      grid-template-areas:
        "menu header table-of-content"
        "menu body table-of-content";
      row-gap: 5rem;
    }

    // Loading
    &.is-loading {
      > hgroup,
      > aside#table-of-contents,
      > [role="document"] {
        animation-duration: 1s;
        animation-fill-mode: forwards;
        animation-name: docs-loading;
        opacity: 0.5;
      }
    }
  }
}

@keyframes docs-loading {
  from {
    opacity: 1;
  }
}

html {
  scroll-padding-top: calc(var(#{$css-var-prefix}breadcrumb-height) + 1rem);

  @media (min-width: map.get(map.get($breakpoints, "lg"), "breakpoint")) {
    scroll-padding-top: calc(var(#{$css-var-prefix}header-height) + 2rem - 0.375rem);
  }
}
