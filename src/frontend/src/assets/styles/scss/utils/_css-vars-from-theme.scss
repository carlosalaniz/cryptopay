@use "sass:map";
@use "@picocss/pico/scss/settings" as *;
@use "@picocss/pico/scss/colors" as *;
@use "../../../../node_modules/@picocss/pico/scss/themes/default/theme-colors" as *;

// Generate CSS variables from a color map
@mixin generate-main-css-vars($color-map) {
  @each $color-key, $color-value in $color-map {
    #{$css-var-prefix}#{$color-key}: $color-value;
  }
}

// Generate the defitions for a theme and mode
@mixin generate-css-vars($theme, $mode) {
  $color-map: map.get(map.get($color-mappings, $theme), $mode);
  $primary-inverse: map.get($color-map, "primary-inverse");

  @include generate-main-css-vars($color-map);
}

@mixin generate-theme($name, $theme) {
  /* #{$name} color for light color scheme (Default) */
  /* Can be forced with data-theme="light" */
  [data-theme="light"],
  :root:not([data-theme="dark"]) {
    @include generate-css-vars($theme, "light");
  }

  /* #{$name} color for dark color scheme (Auto) */
  /* Automatically enabled if user has Dark mode enabled */
  @media only screen and (prefers-color-scheme: dark) {
    :root:not([data-theme]) {
      @include generate-css-vars($theme, "dark");
    }
  }

  /* #{$name} color for dark color scheme (Forced) */
  /* Enabled if forced with data-theme="dark" */
  [data-theme="dark"] {
    @include generate-css-vars($theme, "dark");
  }
}
