@use "sass:map";
@use "@picocss/pico/scss/settings" as *;

body > main.homepage > .hero > .demo {
  --angle: 0deg;
  --demo-border-gradient: linear-gradient(
    var(--angle),
    var(#{$css-var-prefix}demo-border-gradient-colors)
  );
  display: flex;
  position: relative;
  flex-direction: column;

  // Hack to avoid lag on Safari
  @supports (-webkit-hyphens: none) {
    animation: none;
  }

  @media (min-width: map.get(map.get($breakpoints, "md"), "breakpoint")) {
    max-width: map.get(map.get($breakpoints, "md"), "viewport");
  }

  @media (min-width: map.get(map.get($breakpoints, "xl"), "breakpoint")) {
    max-width: map.get(map.get($breakpoints, "lg"), "viewport");
  }

  article.component {
    #{$css-var-prefix}block-spacing-horizontal: var(#{$css-var-prefix}spacing) !important;
    #{$css-var-prefix}block-spacing-vertical: calc(var(#{$css-var-prefix}spacing) * 1.5) !important;
    display: flex;
    position: relative;
    flex-direction: column;
    justify-content: flex-start;
    width: 100%;
    min-width: 0;
    height: 100%;
    height: calc(22.8125rem + var(#{$css-var-prefix}block-spacing-vertical));
    margin-bottom: 0;
    margin-inline: auto;
    overflow: visible;
    outline: none;
    background-color: var(#{$css-var-prefix}background-color);
    box-shadow: none;
    pointer-events: none;
    user-select: none;

    @media (min-width: map.get(map.get($breakpoints, "sm"), "breakpoint")) {
      #{$css-var-prefix}block-spacing-horizontal: calc(
        var(#{$css-var-prefix}spacing) * 1.5
      ) !important;
      #{$css-var-prefix}block-spacing-vertical: calc(var(#{$css-var-prefix}spacing) * 2) !important;
      height: calc(24.5rem + var(#{$css-var-prefix}block-spacing-vertical));
    }

    @media (min-width: map.get(map.get($breakpoints, "md"), "breakpoint")) {
      height: calc(24.5rem + var(#{$css-var-prefix}block-spacing-vertical));
    }

    @media (min-width: map.get(map.get($breakpoints, "lg"), "breakpoint")) {
      height: calc(24rem + var(#{$css-var-prefix}block-spacing-vertical));
    }

    @media (min-width: map.get(map.get($breakpoints, "xl"), "breakpoint")) {
      #{$css-var-prefix}block-spacing-horizontal: calc(
        var(#{$css-var-prefix}spacing) * 3
      ) !important;
      #{$css-var-prefix}block-spacing-vertical: calc(var(#{$css-var-prefix}spacing) * 3) !important;
      height: calc(24rem);
    }

    @media (min-width: map.get(map.get($breakpoints, "xxl"), "breakpoint")) {
      height: calc(23.5rem + var(#{$css-var-prefix}block-spacing-vertical));
    }

    form {
      &[role="search"],
      &[role="group"],
      input:only-child,
      input[aria-invalid="true"],
      button {
        margin-bottom: 0;
      }

      small {
        margin-top: 0.25rem;
        margin-bottom: 0;
      }

      label {
        margin-bottom: 0;
      }

      // Focused group form
      &[role="search"],
      &[role="group"] {
        &.is-focused {
          #{$css-var-prefix}group-box-shadow: var(
            #{$css-var-prefix}group-box-shadow-focus-with-button
          );

          input:not([type="checkbox"], [type="radio"]),
          select {
            border-color: transparent;
          }

          button {
            box-shadow: none;
          }
        }
      }

      // Input
      input {
        user-select: none;

        &:not([type="range"]) {
          &.is-focused {
            #{$css-var-prefix}border-color: var(#{$css-var-prefix}form-element-active-border-color);
            #{$css-var-prefix}box-shadow: 0 0 0 var(#{$css-var-prefix}outline-width)
              var(#{$css-var-prefix}form-element-focus-color);
          }
        }

        &:not([type="checkbox"]) {
          &.is-focused {
            #{$css-var-prefix}background-color: var(
              #{$css-var-prefix}form-element-active-background-color
            );
          }
        }

        &[type="range"] {
          &.is-focused {
            #{$css-var-prefix}range-border-color: var(#{$css-var-prefix}range-active-border-color);
            #{$css-var-prefix}range-thumb-color: var(#{$css-var-prefix}range-thumb-active-color);

            // Slider Thumb
            &::-webkit-slider-thumb {
              transform: scale(1.25);
            }

            &::-moz-range-thumb {
              transform: scale(1.25);
            }

            &::-ms-thumb {
              transform: scale(1.25);
            }
          }
        }
      }

      // Focused button
      button {
        &.is-focused {
          #{$css-var-prefix}background-color: var(#{$css-var-prefix}primary-hover-background);
          #{$css-var-prefix}border-color: var(#{$css-var-prefix}primary-hover-border);
          #{$css-var-prefix}color: var(#{$css-var-prefix}primary-inverse);
          #{$css-var-prefix}box-shadow:
            var(#{$css-var-prefix}button-hover-box-shadow, 0 0 0 rgba(0, 0, 0, 0)),
            0 0 0 var(#{$css-var-prefix}outline-width) var(#{$css-var-prefix}primary-focus);
        }
      }

      * {
        transition: border-radius var(#{$css-var-prefix}transition);
      }
    }

    footer.code {
      background: none;

      pre {
        overflow: hidden;
      }

      [data-typeit-id] {
        .ti-cursor {
          transform: translateX(-0.25em);
          color: inherit;
          font-style: inherit;
          font-weight: inherit;
          font-size: inherit;
          line-height: inherit;
          font-family: inherit;
        }
      }
    }

    .controls {
      display: grid;
      position: absolute;
      right: 0;
      bottom: 0;
      grid-auto-flow: column;
      padding: var(#{$css-var-prefix}spacing);
      pointer-events: all;
      transition: opacity var(#{$css-var-prefix}transition);
      grid-gap: calc(var(#{$css-var-prefix}spacing) * 0.25);

      @media (min-width: map.get(map.get($breakpoints, "xl"), "breakpoint")) {
        opacity: 0;
      }

      svg {
        width: auto;
        height: 1rem;
        color: var(#{$css-var-prefix}muted-color);
        cursor: pointer;
        transition: color var(#{$css-var-prefix}transition);

        &:hover {
          color: var(#{$css-var-prefix}secondary-hover);
        }
      }
    }

    &:hover {
      .controls {
        opacity: 1;
      }
    }
  }

  &.is-maximized {
    z-index: 999;
    position: fixed;
    max-width: none;
    inset: 0;
    transform: none;
    background: var(#{$css-var-prefix}background-color);

    article.component {
      position: unset;
      max-width: none;
      border-radius: 0;
      outline: none;

      @media (min-width: map.get(map.get($breakpoints, "sm"), "breakpoint")) {
        max-width: map.get(map.get($breakpoints, "sm"), "viewport");
        height: auto;
        margin: auto;
      }

      @media (min-width: map.get(map.get($breakpoints, "lg"), "breakpoint")) {
        max-width: map.get(map.get($breakpoints, "md"), "viewport");
      }

      @media (min-width: map.get(map.get($breakpoints, "xl"), "breakpoint")) {
        max-width: map.get(map.get($breakpoints, "lg"), "viewport");
      }

      .controls {
        opacity: 1;
      }
    }
  }

  // Border gradient
  &::before {
    z-index: 0;
    position: absolute;
    inset: -3rem;
    border-radius: var(#{$css-var-prefix}border-radius);
    background: var(--demo-border-gradient);
    content: "";
    filter: blur(3rem);
    opacity: 0.25;
  }
  &::after {
    z-index: -1;
    position: absolute;
    inset: -1px;
    border-radius: var(#{$css-var-prefix}border-radius);
    background: var(--demo-border-gradient);
    content: "";
  }
}
